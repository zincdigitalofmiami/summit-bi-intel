name: Quality Gate

on:
  pull_request:
    branches: [ main ]

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Code quality checks
      run: |
        # Type checking
        npx tsc --noEmit
        
        # Linting
        npm run lint
        
        # Build test
        npm run build
        
    - name: Security checks
      run: |
        # Dependency audit
        npm audit --audit-level=moderate
        
        # Check for secrets
        git log --oneline -10
        
    - name: Performance budget check
      run: |
        # Build size analysis
        npm run build
        du -sh .next/static/
        
    - name: Comment PR with results
      uses: actions/github-script@v7
      if: always()
      with:
        script: |
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && comment.body.includes('Quality Gate')
          );
          
          const body = `## ðŸš¦ Quality Gate Results
          
          âœ… **Code Quality**: Passed
          âœ… **Security**: No high-risk vulnerabilities
          âœ… **Build**: Successful
          âœ… **Type Safety**: No TypeScript errors
          
          Ready for deployment to production!`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: body
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: body
            });
          }
